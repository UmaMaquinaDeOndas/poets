
//! Autogenerated weights for market_state
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-06-13, STEPS: `5`, REPEAT: 5, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `CT-HP`, CPU: `11th Gen Intel(R) Core(TM) i7-1195G7 @ 2.90GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/parachain-template-node
// benchmark
// pallet
// --chain
// dev
// --execution=wasm
// --wasm-execution=compiled
// --pallet
// market_state
// --extrinsic
// *
// --steps
// 5
// --repeat
// 5
// --output
// pallets/market-state/src/weights.rs
// --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for market_state.
pub trait WeightInfo {
	fn submit_bids(c: u32, ) -> Weight;
	fn submit_asks(c: u32, ) -> Weight;
	fn submit_solution(b: u32, a: u32, ) -> Weight;
}

/// Weights for market_state using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: MarketState Stage (r:1 w:0)
	// Storage: MarketState AccountBids (r:1 w:1)
	// Storage: MarketState LastBidId (r:1 w:1)
	// Storage: MarketState Bids (r:0 w:1)
	/// The range of component `c` is `[1, 50]`.
	fn submit_bids(c: u32, ) -> Weight {
		// Minimum execution time: 26_438 nanoseconds.
		Weight::from_ref_time(58_329_155)
			// Standard Error: 666_157
			.saturating_add(Weight::from_ref_time(2_304_758).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(2))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
	}
	// Storage: MarketState Stage (r:1 w:0)
	// Storage: MarketState AccountAsks (r:1 w:1)
	// Storage: MarketState LastAskId (r:1 w:1)
	// Storage: MarketState Asks (r:0 w:1)
	/// The range of component `c` is `[1, 50]`.
	fn submit_asks(c: u32, ) -> Weight {
		// Minimum execution time: 28_234 nanoseconds.
		Weight::from_ref_time(37_827_526)
			// Standard Error: 145_877
			.saturating_add(Weight::from_ref_time(1_835_690).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(2))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
	}
	// Storage: MarketState Stage (r:1 w:0)
	// Storage: MarketState Bids (r:1 w:0)
	// Storage: MarketState Asks (r:5000 w:0)
	// Storage: MarketState BestSolution (r:1 w:1)
	// Storage: MarketState AcceptedAsks (r:0 w:1)
	// Storage: MarketState AcceptedBids (r:0 w:1)
	/// The range of component `b` is `[1, 5000]`.
	/// The range of component `a` is `[1, 5000]`.
	fn submit_solution(b: u32, a: u32, ) -> Weight {
		// Minimum execution time: 18_820_582 nanoseconds.
		Weight::from_ref_time(13_018_706_660)
			// Standard Error: 417_533
			.saturating_add(Weight::from_ref_time(2_706_256).saturating_mul(b.into()))
			// Standard Error: 417_533
			.saturating_add(Weight::from_ref_time(1_749_840).saturating_mul(a.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(b.into())))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(a.into())))
			.saturating_add(T::DbWeight::get().writes(3))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: MarketState Stage (r:1 w:0)
	// Storage: MarketState AccountBids (r:1 w:1)
	// Storage: MarketState LastBidId (r:1 w:1)
	// Storage: MarketState Bids (r:0 w:1)
	/// The range of component `c` is `[1, 50]`.
	fn submit_bids(c: u32, ) -> Weight {
		// Minimum execution time: 26_438 nanoseconds.
		Weight::from_ref_time(58_329_155)
			// Standard Error: 666_157
			.saturating_add(Weight::from_ref_time(2_304_758).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(3))
			.saturating_add(RocksDbWeight::get().writes(2))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(c.into())))
	}
	// Storage: MarketState Stage (r:1 w:0)
	// Storage: MarketState AccountAsks (r:1 w:1)
	// Storage: MarketState LastAskId (r:1 w:1)
	// Storage: MarketState Asks (r:0 w:1)
	/// The range of component `c` is `[1, 50]`.
	fn submit_asks(c: u32, ) -> Weight {
		// Minimum execution time: 28_234 nanoseconds.
		Weight::from_ref_time(37_827_526)
			// Standard Error: 145_877
			.saturating_add(Weight::from_ref_time(1_835_690).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(3))
			.saturating_add(RocksDbWeight::get().writes(2))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(c.into())))
	}
	// Storage: MarketState Stage (r:1 w:0)
	// Storage: MarketState Bids (r:1 w:0)
	// Storage: MarketState Asks (r:5000 w:0)
	// Storage: MarketState BestSolution (r:1 w:1)
	// Storage: MarketState AcceptedAsks (r:0 w:1)
	// Storage: MarketState AcceptedBids (r:0 w:1)
	/// The range of component `b` is `[1, 5000]`.
	/// The range of component `a` is `[1, 5000]`.
	fn submit_solution(b: u32, a: u32, ) -> Weight {
		// Minimum execution time: 18_820_582 nanoseconds.
		Weight::from_ref_time(13_018_706_660)
			// Standard Error: 417_533
			.saturating_add(Weight::from_ref_time(2_706_256).saturating_mul(b.into()))
			// Standard Error: 417_533
			.saturating_add(Weight::from_ref_time(1_749_840).saturating_mul(a.into()))
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(b.into())))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(a.into())))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
}